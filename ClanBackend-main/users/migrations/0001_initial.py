# Generated by Django 5.1 on 2024-09-13 03:03

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import parler.fields
import parler.models
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('branches', '0001_initial'),
        ('permissions', '0001_initial'),
        ('settings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('email_authentication', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('phone_number_authentication', models.BooleanField(default=False)),
                ('phone_verification_token', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True)),
                ('is_phone_number_verified', models.BooleanField(default=False)),
                ('google_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('google_authentication', models.BooleanField(default=False)),
                ('apple_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('apple_authentication', models.BooleanField(default=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('data_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('tow_factor_authentication', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('CLAN', 'Clan'), ('BRANCH', 'Branch')], default='CUSTOMER', max_length=50, verbose_name='Type')),
                ('clan_job', models.CharField(choices=[('NONE', 'None'), ('ADMIN', 'Administrator'), ('STAFF', 'Staff')], default='NONE', max_length=50, verbose_name='Job in clan')),
                ('branch_job', models.CharField(choices=[('NONE', 'None'), ('MANAGER', 'Branch Manager'), ('ADMIN', 'Branch Administrator'), ('STAFF', 'Branch Staff'), ('DELIVERY', 'Delivery'), ('PREPARER', 'Preparer')], default='NONE', max_length=50, verbose_name='Job in branch')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('REVIEWING', 'Reviewing'), ('BLOCKED', 'Blocked')], default='ACTIVE', max_length=50, verbose_name='Account Status')),
                ('is_customer', models.BooleanField(default=False, verbose_name='Is customer')),
                ('is_clan', models.BooleanField(default=False, verbose_name='Is clan')),
                ('is_branch', models.BooleanField(default=False, verbose_name='Is Branch')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is administrator')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is staff')),
                ('is_delivery', models.BooleanField(default=False, verbose_name='Is delivery')),
                ('is_preparer', models.BooleanField(default=False, verbose_name='Is preparer')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staffs', to='branches.branch', verbose_name='User Branch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('permissions', models.ManyToManyField(blank=True, related_name='users', to='permissions.permission', verbose_name='User Permissions')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClanUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
        ),
        migrations.CreateModel(
            name='CardID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UID')),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1, verbose_name='Gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('place_of_birth', models.CharField(blank=True, max_length=20, null=True, verbose_name='Place of Birth')),
                ('date_of_end', models.DateField(blank=True, null=True, verbose_name='Date of End')),
                ('number', models.CharField(max_length=20, unique=True, verbose_name='Card Number')),
                ('front_image', models.ImageField(blank=True, null=True, upload_to='cards/', verbose_name='Front Image')),
                ('back_image', models.ImageField(blank=True, null=True, upload_to='cards/', verbose_name='Back Image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='card', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UID')),
                ('street_number', models.CharField(max_length=10, verbose_name='Street Number')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal Code')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='Location')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.city', verbose_name='City')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.country', verbose_name='Country')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.region', verbose_name='Region')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UID')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1, verbose_name='Gender')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='CardIDTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('first_name', models.CharField(max_length=20, verbose_name='First Name')),
                ('second_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Second Name')),
                ('third_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Third Name')),
                ('family_name', models.CharField(max_length=20, verbose_name='Family Name')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='users.cardid')),
            ],
            options={
                'verbose_name': 'card id Translation',
                'db_table': 'users_cardid_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserAddressTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255, verbose_name='Address Name')),
                ('street_name', models.CharField(max_length=255, verbose_name='Street Name')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='users.useraddress')),
            ],
            options={
                'verbose_name': 'user address Translation',
                'db_table': 'users_useraddress_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
